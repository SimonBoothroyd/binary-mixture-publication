from typing import Any, Dict

from nonbonded.backend.database.models import Parameter
from nonbonded.library.models.engines import ForceBalance
from nonbonded.library.models.forcefield import ForceField
from nonbonded.library.models.projects import Optimization, Study
from nonbonded.library.models.targets import EvaluatorTarget
from nonbonded.library.utilities.environments import ChemicalEnvironment

PROJECT_ID = "binary-mixture"
STUDY_ID = "expanded"


def common_optimization_options(training_set_ids) -> Dict[str, Any]:

    from openff.toolkit.typing.engines import smirnoff

    off_force_field = smirnoff.ForceField("openff-1.0.0.offxml")

    return dict(
        project_id=PROJECT_ID,
        study_id=STUDY_ID,
        force_field=ForceField.from_openff(off_force_field),
        parameters_to_train=[
            Parameter(handler_type="vdW", attribute_name=attribute_name, smirks=smirks)
            for attribute_name in ["epsilon", "rmin_half"]
            for smirks in [
                "[#1:1]-[#6X4]",
                "[#6:1]",
                "[#6X4:1]",
                "[#8:1]",
                "[#8X2H0+0:1]",
                "[#8X2H1+0:1]",
            ]
        ],
        engine=ForceBalance(
            priors={"vdW/Atom/epsilon": 0.1, "vdW/Atom/rmin_half": 1.0}
        ),
        targets=[
            EvaluatorTarget(
                id="phys-prop",
                denominators={
                    "Density": "0.0482 g / ml",
                    "EnthalpyOfVaporization": "25.683 kJ / mol",
                    "EnthalpyOfMixing": "1.594 kJ / mol",
                    "ExcessMolarVolume": "0.392 cm ** 3 / mol",
                },
                data_set_ids=training_set_ids,
            )
        ],
        analysis_environments=[
            ChemicalEnvironment.Alcohol,
            ChemicalEnvironment.CarboxylicAcidEster,
            ChemicalEnvironment.CarboxylicAcid,
            ChemicalEnvironment.Ketone,
            ChemicalEnvironment.Alkane,
            ChemicalEnvironment.Ether,
        ],
        max_iterations=12,
    )


def main():

    study = Study(
        id=STUDY_ID,
        project_id=PROJECT_ID,
        name="Expanded Environments",
        description=(
            "This study aims to build upon the initial results generated by the "
            "'Alcohol + Ester' study by expanding the training and test data sets "
            "to additionally include system which contain ketone, alkane, and "
            "ether chemical environments."
            "\n\n"
            "The rationale for this expansion is to ensure the results generated "
            "on only the limited training and test sets generalize. In particular, "
            "the data sets have been expanded to include a range of systems which "
            "do not strongly deviate from ideality (i.e. for which pure data is "
            "expected to be more informative) up to systems which do (i.e for "
            "which mixture data should be most informative)."
            "\n\n"
            "This should give a clear indication of whether it is at all "
            "beneficial or indeed necessary to include pure data as part of the "
            "force field optimization."
        ),
        optimizations=[
            Optimization(
                id="rho-h-vap",
                name="rho + Hvap",
                description=(
                    "An optimization against a data set containing only density and "
                    "enthalpy of vaporization measurements made for pure systems."
                    "\n\n"
                    "See the `alcohol-ester` study for more details."
                ),
                **common_optimization_options(
                    ["bmfs-exp-train-rho", "bmfs-exp-train-h-vap"]
                ),
            ),
            Optimization(
                id="h-mix-rho-x",
                name="Hmix(x) + rho(x)",
                description=(
                    "An optimization against a data set containing density and "
                    "enthalpy of mixing measurements made for binary mixtures. "
                    "\n\n"
                    "See the `alcohol-ester` study for more details."
                ),
                **common_optimization_options(
                    ["bmfs-exp-train-h-mix", "bmfs-exp-train-rho-x"]
                ),
            ),
            Optimization(
                id="h-mix-rho-x-rho",
                name="Hmix(x) + rho(x) + rho",
                description=(
                    "An optimization against a data set containing density and "
                    "enthalpy of mixing measurements made for binary mixtures, as well "
                    "as densities measured for pure systems."
                    "\n\n"
                    "See the `alcohol-ester` study for more details."
                ),
                **common_optimization_options(
                    [
                        "bmfs-exp-train-h-mix",
                        "bmfs-exp-train-rho-x",
                        "bmfs-exp-train-rho",
                    ]
                ),
            ),
            Optimization(
                id="h-mix-rho-x-rho-h-vap",
                name="Hmix(x) + rho(x) + rho + Hvap",
                description=(
                    "An optimization against a data set containing density and "
                    "enthalpy of mixing measurements made for binary mixtures, as well "
                    "as densities and enthalpies of vaporization made for pure systems."
                    "\n\n"
                    "See the `alcohol-ester` study for more details."
                ),
                **common_optimization_options(
                    [
                        "bmfs-exp-train-h-mix",
                        "bmfs-exp-train-rho-x",
                        "bmfs-exp-train-rho",
                        "bmfs-exp-train-h-vap",
                    ]
                ),
            ),
        ],
    )
    study.upload()


if __name__ == "__main__":
    main()
